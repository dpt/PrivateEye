# Project:		PrivateEye:

# Tools

asm_			= objasm
cc_			= cc
cdir			= cdir
every_			= every.every2
link_			= link
wipe			= $(suppress) wipe
suppress		= x
templheadr_		= templheadr

# Tool flags:

asmflags		= $(depend) $(throwback)
ccflags			= -strict -c99 -fah -Wh -Otime -c $(cpu) $(depend) $(throwback) $(includes) $(ccextra)
#ccflags_memcheck	= -strict -c99 -fah -Wh -Otime -c $(cpu) $(depend) $(throwback) $(includes) $(ccextra) -zpc1 -DMemCheck_MEMCHECK -JMemCheck:ANSI.,:mem -fw
everyflags     	 	= -c
linkflags		= -c++
wipeflags		= ~CFR~V
templheadrflags		=

# Combined tools and flags

asm			= $(asm_) $(asmflags)
cc			= $(cc_) $(ccflags)
cc_memcheck		= $(cc_) $(ccflags_memcheck)
every			= $(every_) $(everyflags)
link			= $(link_) $(linkflags)
templheadr		= $(templheadr_) $(templheadrflags)

# Tool flags (specific cases)

defines			= -DEYE_TAGS -DEYE_THUMBVIEW -DEYE_ZONES -DEYE_META

# Compiler options

cpu			= -apcs 3/32bit -arch 3 -cpu XScale
depend			= -depend !Depend
throwback		= -throwback

# Library references

includes		= -IC: -ICLibs: -IOSLib: -IZLib: -ITCPIPLibs:

lib_normal		= CLibs:appengine.o.AOFLib CLibs:exiftags.o.exiftags CLibs:jpeg.o.libjpeg CLibs:jpeg.o.libtrans CLibs:md5.o.libmd5
lib_debug		= CLibs:appengine.odf.AOFLib CLibs:exiftags.odf.exiftags CLibs:jpeg.odf.libjpeg CLibs:jpeg.odf.libtrans CLibs:md5.odf.libmd5
lib_fortify       	= CLibs:fortify.o.libfortify
#lib_memcheck       	= MemCheck:o.MC
lib_all			= CLibs:png.libpng CLibs:zlib.zlib OSLib:o.OSLib32 C:o.flexlib C:o.stubs

libraries_normal	= $(lib_normal) $(lib_all)
libraries_debug_fortify	= $(lib_debug) $(lib_fortify) $(lib_all)
libraries_memcheck	= $(lib_debug) $(lib_memcheck) $(lib_all)

# Generated files

# The number of objects involved causes path buffers to overflow, so here we
# use a via file.

objs_normal  = \
#Makatic{ -V objs-normal
-F
-ff "..c.*  -x ..test...*" "\t\t\t*2.o.#0 \\\n"
-ff "..s.*"		   "\t\t\t*2.o.#0 \\\n"
#Makatic}

objs_debug = \
#Makatic{ -V objs-debug
-F
-ff "..c.*  -x ..test...*" "\t\t\t*2.odf.#0 \\\n"
-ff "..s.*"		   "\t\t\t*2.odf.#0 \\\n"
#Makatic}

objs_memcheck = \
#Makatic{ -V objs-memcheck
-F
-ff "..c.*  -x ..test...*" "\t\t\t*2.omc.#0 \\\n"
-ff "..s.*"		   "\t\t\t*2.omc.#0 \\\n"
#Makatic}

# Targets:

target   = !RunImage
targetdf = $(target)DF
targetmc = $(target)MC

$(target):		$(objs_normal) $(libraries_normal)
			$(link) -o $@ $(libraries_normal) -via objs-normal

$(targetdf):		$(objs_debug) $(libraries_debug_fortify)
			$(link) -d -o $@ $(libraries_debug_fortify) -via objs-debug

$(targetmc):		$(objs_memcheck) $(libraries_memcheck)
			$(link) -d -o $@ $(libraries_memcheck) -via objs-memcheck

normal:			$(target)
			@echo 'normal' built

debug:			$(targetdf)
			@echo 'debug' built

memcheck:		$(targetmc)
			@echo 'memcheck' built

# deliberately not including memcheck in 'all'
all:			debug normal
			@echo 'all' built

clean:;			$(every) "@...o @...odf @...omc" -d "$(wipe) %0 $(wipeflags)"
                        $(every) "@.!RunImage* @.Makefile @.objs-* @.h.iconnames" -f "$(wipe) %0 $(wipeflags)"
			@echo Cleaned

iconnames.h: 		Resources.UK.Templates
			$(templheadr) Resources.UK.Templates $@

$(objs_normal):		iconnames.h
$(objs_debug):		iconnames.h
$(objs_memcheck):	iconnames.h

# Rule Patterns

.SUFFIXES:		.o .odf .omc

.s.o:;			$(asm) -from $< -to $@
.c.o:;			$(cc) -ff -DNDEBUG $(defines) -o $@ $<

.s.odf:;		$(asm) -from $< -to $@ -g
.c.odf:;		$(cc) -fn -g -DFORTIFY $(defines) -o $@ $<

.s.omc:;		$(asm) -from $< -to $@ -g
.c.omc:;		$(cc_memcheck) -fn -g $(defines) -o $@ $<

# User-editable dependencies:

# Static dependencies:

# Dynamic dependencies:
